-- VHDL Testbench for the 32-bit Bidirectional Barrel Shifter
--
-- This testbench verifies the functionality of the barrel_shifter_32 component
-- by applying a series of test vectors and checking the output.
--
-- It covers:
-- 1. Left shifts with shift-in bit '0' and '1'.
-- 2. Right shifts with shift-in bit '0' and '1'.
-- 3. Edge cases for shift amounts (0, 1, 31).
-- 4. Different input data patterns.
--
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all; -- For to_unsigned

entity tb_Barrel_Shifter is
end entity tb_Barrel_Shifter;

architecture test of tb_Barrel_Shifter is

    -- Component declaration for the Device Under Test (DUT)
    component Barrel_Shifter is
        port (
            data_in      : in  std_logic_vector(31 downto 0);
            shift_amount : in  std_logic_vector(4 downto 0);
            c_direction    : in  std_logic; -- '0' for LEFT, '1' for RIGHT
            c_arithmetic : in  std_logic;
            data_out     : out std_logic_vector(31 downto 0)
        );
    end component Barrel_Shifter;

    -- Testbench signals
    signal tb_data_in      : std_logic_vector(31 downto 0) := (others => '0');
    signal tb_shift_amount : std_logic_vector(4 downto 0) := (others => '0');
    signal tb_direction    : std_logic                   := '0';
    signal tb_shift_in_bit : std_logic                   := '0';
    signal tb_data_out     : std_logic_vector(31 downto 0) := (others => '0');

    -- Clock signal for timing the test sequence
    signal clk : std_logic := '0';
    constant CLK_PERIOD : time := 10 ns;

begin

    -- Instantiate the Device Under Test (DUT)
    dut_inst: Barrel_Shifter
        port map (
            data_in      => tb_data_in,
            shift_amount => tb_shift_amount,
            c_direction    => tb_direction,
            c_arithmetic => tb_shift_in_bit,
            data_out     => tb_data_out
        );

    -- Clock process
    clk_process: process
    begin
        clk <= '0';
        wait for CLK_PERIOD / 2;
        clk <= '1';
        wait for CLK_PERIOD / 2;
    end process clk_process;

    -- Main test process
    stimulus_process: process
        -- Procedure to simplify test case application
        procedure apply_test (
            test_name    : string;
            data         : std_logic_vector(31 downto 0);
            amount       : integer;
            dir          : std_logic;
            fill_bit     : std_logic;
            expected_out : std_logic_vector(31 downto 0)
        ) is
        begin
            tb_data_in      <= data;
            tb_shift_amount <= std_logic_vector(to_unsigned(amount, 5));
            tb_direction    <= dir;
            tb_shift_in_bit <= fill_bit;
            wait for CLK_PERIOD;

            assert tb_data_out = expected_out
                severity error;
        end procedure apply_test;

    begin
        report "Starting Barrel Shifter Testbench...";
        wait for CLK_PERIOD;

        -- === TEST CASES: SHIFT LEFT (direction = '0') ===
        -- Test 1: Shift Left by 1, fill with 0
        apply_test("LSL by 1, fill 0", x"80000001", 1, '0', '0', x"00000002");
        -- Test 2: Shift Left by 15, fill with 0
        apply_test("LSL by 15, fill 0", x"00000003", 15, '0', '0', x"00018000");
        -- Test 3: Shift Left by 31, fill with 0
        apply_test("LSL by 31, fill 0", x"00000003", 31, '0', '0', x"80000000");
        -- Test 4: Shift Left by 0
        apply_test("LSL by 0", x"DEADBEEF", 0, '0', '0', x"DEADBEEF");
        -- Test 5: Shift Left by 1, fill with 1
        apply_test("LSL by 1, fill 1", x"FFFF0000", 1, '0', '1', x"FFFE0001");
        -- Test 6: Shift Left by 4, fill with 1 (alternating pattern)
        apply_test("LSL by 4, fill 1", x"AAAAAAAA", 4, '0', '1', x"AAAAAAAF");
        -- Test 7: Shift Left, all input is 1s
        apply_test("LSL all 1s", x"FFFFFFFF", 8, '0', '0', x"FFFFFF00");

        -- === TEST CASES: SHIFT RIGHT (direction = '1') ===
        -- Test 8: Shift Right by 1, fill with 0
        apply_test("LSR by 1, fill 0", x"80000001", 1, '1', '0', x"40000000");
        -- Test 9: Shift Right by 15, fill with 0
        apply_test("LSR by 15, fill 0", x"C0000000", 15, '1', '0', x"00000018");
        -- Test 10: Shift Right by 31, fill with 0
        apply_test("LSR by 31, fill 0", x"C0000000", 31, '1', '0', x"00000000");
        -- Test 11: Shift Right by 0
        apply_test("LSR by 0", x"DEADBEEF", 0, '1', '0', x"DEADBEEF");
        -- Test 12: Shift Right by 1, fill with 1 (Arithmetic Shift Right behavior)
        apply_test("ASR by 1", x"80000000", 1, '1', '1', x"C0000000");
        -- Test 13: Shift Right by 4, fill with 1 (alternating pattern)
        apply_test("LSR by 4, fill 1", x"55555555", 4, '1', '1', x"F5555555");
        -- Test 14: Shift Right, all input is 0s
        apply_test("LSR all 0s", x"00000000", 10, '1', '1', x"FFC00000");


        report "All tests completed successfully." severity note;
        wait; -- End of simulation
    end process stimulus_process;

end architecture test;
